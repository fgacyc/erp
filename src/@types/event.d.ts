/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/attendance": {
    /**
     * List or search attendance
     * @description Retrieve a list of attendances or search for attendances given a query.
     */
    get: operations["list-attendances"];
    /**
     * Create a attendance
     * @description Create a new attendance given its information.
     */
    post: operations["create-attendance"];
    /**
     * Delete a attendance
     * @description Delete a attendance given its session_id and user_id.
     */
    delete: operations["delete-attendance"];
  };
  "/attendance/get": {
    /**
     * Get a attendance
     * @description Retrieve a attendance details given its session_id and user_id.
     */
    get: operations["get-attendance"];
  };
  "/currency": {
    /**
     * List or search currency
     * @description Retrieve a list of currency or search for currency given a query.
     */
    get: operations["list-currencies"];
    /**
     * Create a currency
     * @description Create a new currency given its information.
     */
    post: operations["create-currency"];
  };
  "/currency/{code}": {
    /**
     * Get a currency
     * @description Retrieve a currency's details given its code.
     */
    get: operations["get-currency"];
    /**
     * Delete a currency
     * @description Delete a currency given its code.
     */
    delete: operations["delete-currency"];
    /**
     * Update a currency
     * @description Update a currency's details given its code and the corresponding fields to update.
     */
    patch: operations["update-currency"];
  };
  "/event": {
    /** List or search event */
    get: operations["list-event"];
    /** Create an event */
    post: operations["create-event"];
  };
  "/event-type": {
    /**
     * List or search event_type
     * @description Retrieve a list of event_type or search for event_type given a query.
     */
    get: operations["list-event-types"];
    /**
     * Create a event type
     * @description Create a new event type given its information.
     */
    post: operations["create-event-type"];
  };
  "/event-type/{name}": {
    /**
     * Get a event_type
     * @description Retrieve a event_type's details given its name.
     */
    get: operations["get-event-type"];
    /**
     * Delete a event_type
     * @description Delete a event_type given its name.
     */
    delete: operations["delete-event-type"];
    /**
     * Update a event_type
     * @description Update a event_type's details given its name and the corresponding fields to update.
     */
    patch: operations["update-event-type"];
  };
  "/event/{id}": {
    /** Get an event */
    get: operations["get-event"];
    /** Delete an event */
    delete: operations["delete-event"];
    /** Update an event */
    patch: operations["update-event"];
  };
  "/event/{id}/attendance": {
    /** List an event's attendance */
    get: operations["list-event-attendance"];
  };
  "/event/{id}/price": {
    /** List an event's price */
    get: operations["list-event-price"];
  };
  "/event/{id}/registration": {
    /** List an event's registrations */
    get: operations["list-event-registration"];
  };
  "/event/{id}/session": {
    /** List an event's sessions */
    get: operations["list-event-session"];
  };
  "/form-field-type": {
    /**
     * List or search form field type
     * @description Retrieve a list of form field type.
     */
    get: operations["list-form-field-types"];
    /**
     * Create a new form field type
     * @description Create a form field type given its information.
     */
    post: operations["create-form-field-type"];
  };
  "/form-field-type/{type}": {
    /**
     * Get a form field type
     * @description Retrieve a form field type's details given its name.
     */
    get: operations["get-form-field-type"];
    /**
     * Delete a form field type
     * @description Delete a form field type given its name.
     */
    delete: operations["delete-form-field-type"];
    /**
     * Update a form field type
     * @description Update a form field type's details given its name and the corresponding fields to update.
     */
    patch: operations["update-form-field-type"];
  };
  "/price": {
    /** List or search price */
    get: operations["list-price"];
    /** Create price */
    post: operations["create-price"];
  };
  "/price/{id}": {
    /** Get a price */
    get: operations["get-price"];
    /** Delete a price */
    delete: operations["delete-price"];
    /** Update a price */
    patch: operations["update-price"];
  };
  "/registration": {
    /** List or search registration */
    get: operations["list-registration"];
    /** Create registration */
    post: operations["create-registration"];
  };
  "/registration/{id}": {
    /** Get a registration */
    get: operations["get-registration"];
    /** Delete a registration */
    delete: operations["delete-registration"];
    /** Update a registration */
    patch: operations["update-registration"];
  };
  "/registration/{id}/form-field": {
    /** List all form fields for a registration */
    get: operations["list-registration-form-fields"];
    /** Create a form field for a registration */
    post: operations["create-registration-form-field"];
  };
  "/registration/{id}/form-field-data": {
    /** List all form field datas for a registration */
    get: operations["list-registration-form-field-datas"];
    /** Create a form field data for a registration */
    post: operations["create-registration-form-field-data"];
  };
  "/registration/{id}/form-field-data/{name}": {
    /** Get a form field data for a registration for a user */
    get: operations["get-registration-form-field-data"];
  };
  "/registration/{id}/form-field/{name}": {
    /** Get a form field for a registration */
    get: operations["get-registration-form-field"];
    /** Delete a form field for a registration for a user */
    delete: operations["delete-registration-form-field-data"];
    /** Update a form field data for a registration for a user */
    patch: operations["update-registration-form-field-data"];
  };
  "/session": {
    /** List or search session */
    get: operations["list-session"];
    /** Create session */
    post: operations["create-session"];
  };
  "/session/{id}": {
    /** Get a session */
    get: operations["get-session"];
    /** Delete a session */
    delete: operations["delete-session"];
    /** Update a session */
    patch: operations["update-session"];
  };
  "/session/{id}/attendance": {
    /** List a session's attendance */
    get: operations["list-session-attendance"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Attendance: {
      /** Format: date-time */
      created_at: string;
      session_id: string;
      /** Format: date-time */
      updated_at: string;
      user_id: string;
    };
    CreateAttendanceRequest: {
      session_id: string;
      user_id: string;
    };
    CreateCurrencyRequest: {
      code: string;
      countries: string[];
      /** Format: int32 */
      denominator: number;
      name: string;
      /** Format: int32 */
      num: number;
    };
    CreateEventRequest: {
      description: string;
      event_type: string;
      name: string;
    };
    CreateEventTypeRequest: {
      name: string;
    };
    CreateFormFieldTypeRequest: {
      description: string;
      type: string;
    };
    CreatePriceRequest: {
      currency_code: string;
      event_id: string;
      /** Format: int32 */
      fee: number;
      name: string;
    };
    CreateRegistrationFormFieldDataRequest: {
      data: string;
      name: string;
    };
    CreateRegistrationFormFieldRequest: {
      description?: string;
      label: string;
      name: string;
      type: string;
      /** Format: int32 */
      weight: number;
    };
    CreateRegistrationRequest: {
      event_id: string;
      name: string;
    };
    CreateSessionRequest: {
      /** Format: date-time */
      actual_end_at?: string;
      /** Format: date-time */
      actual_start_at?: string;
      description?: string;
      /** Format: date-time */
      end_at: string;
      event_id: string;
      /** Format: int32 */
      expected_attendees: number;
      name: string;
      /** Format: date-time */
      start_at: string;
    };
    Currency: {
      code: string;
      countries: string[];
      /** Format: int32 */
      denominator: number;
      name: string;
      /** Format: int32 */
      num: number;
    };
    DeleteAttendanceRequest: {
      session_id: string;
      user_id: string;
    };
    ErrorResponse: {
      message: string;
    };
    Event: {
      /** Format: date-time */
      created_at: string;
      description: string;
      id: string;
      name: string;
      type: string;
      /** Format: date-time */
      updated_at: string;
    };
    EventType: {
      /** Format: date-time */
      created_at: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
    };
    FormFieldType: {
      /** Format: date-time */
      created_at: string;
      description: string;
      type: string;
      /** Format: date-time */
      updated_at: string;
    };
    GetAttendanceRequest: {
      session_id: string;
      user_id: string;
    };
    Price: {
      /** Format: date-time */
      created_at: string;
      currency_code: string;
      event_id: string;
      /** Format: int32 */
      fee: number;
      id: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
    };
    Registration: {
      /** Format: date-time */
      close_at: string;
      /** Format: date-time */
      created_at: string;
      event_id: string;
      id: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
    };
    RegistrationFormField: {
      /** Format: date-time */
      created_at: string;
      description?: string;
      label: string;
      name: string;
      registration_id: string;
      type: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: int32 */
      weight: number;
    };
    RegistrationFormFieldData: {
      /** Format: date-time */
      created_at: string;
      data: string;
      name: string;
      registration_id: string;
      /** Format: date-time */
      updated_at: string;
      user_id: string;
    };
    Session: {
      /** Format: date-time */
      actual_end_at?: string;
      /** Format: date-time */
      actual_start_at?: string;
      /** Format: date-time */
      created_at: string;
      description?: string;
      /** Format: date-time */
      end_at: string;
      event_id: string;
      /** Format: int32 */
      expected_attendees: number;
      id: string;
      name: string;
      /** Format: date-time */
      start_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    UpdateCurrencyRequest: {
      countries?: string[];
      /** Format: int32 */
      denominator?: number;
      name?: string;
      /** Format: int32 */
      num?: number;
    };
    UpdateEventRequest: {
      description?: string;
      event_type?: string;
      name?: string;
    };
    UpdateEventTypeRequest: {
      name?: string;
    };
    UpdateFormFieldTypeRequest: {
      description?: string;
      type?: string;
    };
    UpdatePriceRequest: {
      currency_code?: string;
      /** Format: int32 */
      fee?: number;
      /** Format: int32 */
      name?: number;
    };
    UpdateRegistrationFormFieldDataRequest: {
      data?: string;
    };
    UpdateRegistrationFormFieldRequest: {
      description?: string;
      label?: string;
      name?: string;
      type?: string;
      /** Format: int32 */
      weight?: number;
    };
    UpdateRegistrationRequest: {
      event_id?: string;
      /** Format: int32 */
      name?: number;
    };
    UpdateSessionRequest: {
      /** Format: date-time */
      actual_end_at?: string;
      /** Format: date-time */
      actual_start_at?: string;
      description?: string;
      /** Format: date-time */
      end_at?: string;
      event_id?: string;
      /** Format: int32 */
      expected_attendees?: number;
      name?: string;
      /** Format: date-time */
      start_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List or search attendance
   * @description Retrieve a list of attendances or search for attendances given a query.
   */
  "list-attendances": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Attendance"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a attendance
   * @description Create a new attendance given its information.
   */
  "create-attendance": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateAttendanceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Attendance"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a attendance
   * @description Delete a attendance given its session_id and user_id.
   */
  "delete-attendance": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["DeleteAttendanceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Attendance"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a attendance
   * @description Retrieve a attendance details given its session_id and user_id.
   */
  "get-attendance": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["GetAttendanceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Attendance"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search currency
   * @description Retrieve a list of currency or search for currency given a query.
   */
  "list-currencies": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Currency"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a currency
   * @description Create a new currency given its information.
   */
  "create-currency": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateCurrencyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Currency"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a currency
   * @description Retrieve a currency's details given its code.
   */
  "get-currency": {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Currency"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a currency
   * @description Delete a currency given its code.
   */
  "delete-currency": {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Currency"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a currency
   * @description Update a currency's details given its code and the corresponding fields to update.
   */
  "update-currency": {
    parameters: {
      path: {
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateCurrencyRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Currency"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List or search event */
  "list-event": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Event"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create an event */
  "create-event": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateEventRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Event"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search event_type
   * @description Retrieve a list of event_type or search for event_type given a query.
   */
  "list-event-types": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["EventType"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a event type
   * @description Create a new event type given its information.
   */
  "create-event-type": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateEventTypeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["EventType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a event_type
   * @description Retrieve a event_type's details given its name.
   */
  "get-event-type": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["EventType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a event_type
   * @description Delete a event_type given its name.
   */
  "delete-event-type": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["EventType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a event_type
   * @description Update a event_type's details given its name and the corresponding fields to update.
   */
  "update-event-type": {
    parameters: {
      path: {
        name: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateEventTypeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["EventType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get an event */
  "get-event": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Event"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete an event */
  "delete-event": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Event"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update an event */
  "update-event": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateEventRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Event"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List an event's attendance */
  "list-event-attendance": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Attendance"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List an event's price */
  "list-event-price": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Price"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List an event's registrations */
  "list-event-registration": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Registration"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List an event's sessions */
  "list-event-session": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Session"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search form field type
   * @description Retrieve a list of form field type.
   */
  "list-form-field-types": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["FormFieldType"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a new form field type
   * @description Create a form field type given its information.
   */
  "create-form-field-type": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateFormFieldTypeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["FormFieldType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a form field type
   * @description Retrieve a form field type's details given its name.
   */
  "get-form-field-type": {
    parameters: {
      path: {
        type: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["FormFieldType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a form field type
   * @description Delete a form field type given its name.
   */
  "delete-form-field-type": {
    parameters: {
      path: {
        type: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["FormFieldType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a form field type
   * @description Update a form field type's details given its name and the corresponding fields to update.
   */
  "update-form-field-type": {
    parameters: {
      path: {
        type: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateFormFieldTypeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["FormFieldType"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List or search price */
  "list-price": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Price"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create price */
  "create-price": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreatePriceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Price"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get a price */
  "get-price": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Price"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete a price */
  "delete-price": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Price"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update a price */
  "update-price": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdatePriceRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Price"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List or search registration */
  "list-registration": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Registration"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create registration */
  "create-registration": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateRegistrationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Registration"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get a registration */
  "get-registration": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Registration"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete a registration */
  "delete-registration": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Registration"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update a registration */
  "update-registration": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateRegistrationRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Registration"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List all form fields for a registration */
  "list-registration-form-fields": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormField"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create a form field for a registration */
  "create-registration-form-field": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateRegistrationFormFieldRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormField"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List all form field datas for a registration */
  "list-registration-form-field-datas": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormFieldData"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create a form field data for a registration */
  "create-registration-form-field-data": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateRegistrationFormFieldDataRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormFieldData"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get a form field data for a registration for a user */
  "get-registration-form-field-data": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormFieldData"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get a form field for a registration */
  "get-registration-form-field": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormField"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete a form field for a registration for a user */
  "delete-registration-form-field-data": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormFieldData"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update a form field data for a registration for a user */
  "update-registration-form-field-data": {
    parameters: {
      path: {
        id: string;
        name: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateRegistrationFormFieldDataRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["RegistrationFormFieldData"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List or search session */
  "list-session": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Session"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create session */
  "create-session": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateSessionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Session"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Get a session */
  "get-session": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Session"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete a session */
  "delete-session": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Session"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update a session */
  "update-session": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateSessionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Session"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** List a session's attendance */
  "list-session-attendance": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Attendance"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
