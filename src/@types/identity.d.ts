/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/connect-groups": {
    /**
     * List or search connect groups
     * @description Retrieve a list of connect groups or search for connect groups given a query.
     */
    get: operations["list-connect-groups"];
    /**
     * Create a connect group
     * @description Create a new connect group given its information.
     */
    post: operations["create-connect-group"];
  };
  "/connect-groups/{id}": {
    /**
     * Get a connect group
     * @description Retrieve a connect group's details given its id.
     */
    get: operations["get-connect-group"];
    /**
     * Delete a connect group
     * @description Delete a connect group given its id.
     */
    delete: operations["delete-connect-group"];
    /**
     * Update a connect group
     * @description Update a connect group's details given its id and the corresponding fields to update.
     */
    patch: operations["update-connect-group"];
  };
  "/connect-groups/{id}/users": {
    /**
     * Get connect group users
     * @description Retrieve a list of users associated with a connect group given the connect group's id.
     */
    get: operations["get-connect-group-users"];
    /**
     * Associate users with a connect group
     * @description Associate users with a connect group given the connect group's id and the users' ids.
     */
    post: operations["associate-users-with-connect-group"];
    /**
     * Remove users from a connect group
     * @description Remove users from a connect group given the connect group's id and the users' ids.
     */
    delete: operations["remove-users-from-connect-group"];
  };
  "/ministries": {
    /**
     * List or search ministries
     * @description Retrieve a list of ministries or search for ministries given a query.
     */
    get: operations["list-ministries"];
    /**
     * Create a ministry
     * @description Create a new ministry given its information.
     */
    post: operations["create-ministry"];
  };
  "/ministries/{id}": {
    /**
     * Get a ministry
     * @description Retrieve a ministry's details given its id.
     */
    get: operations["get-ministry"];
    /**
     * Delete a ministry
     * @description Delete a ministry given its id.
     */
    delete: operations["delete-ministry"];
    /**
     * Update a ministry
     * @description Update a ministry's details given its id and the corresponding fields to update.
     */
    patch: operations["update-ministry"];
  };
  "/ministries/{id}/users": {
    /**
     * Get users associated with a ministry
     * @description Retrieve a list of users associated with a ministry given the ministry's id.
     */
    get: operations["get-ministry-users"];
    /**
     * Associate users with a ministry
     * @description Associate users with a ministry given the ministry's id and the users' ids.
     */
    post: operations["associate-users-with-ministry"];
    /**
     * Remove users from a ministry
     * @description Remove users from a ministry given the ministry's id and the users' ids.
     */
    delete: operations["remove-users-from-ministry"];
  };
  "/ministry-departments": {
    /**
     * List or search ministry departments
     * @description Retrieve a list of ministry departments or search for ministry departments given a query.
     */
    get: operations["list-ministry-department"];
    /**
     * Create a ministry department
     * @description Create a new ministry department given its information.
     */
    post: operations["create-ministry-department"];
  };
  "/ministry-departments/{id}": {
    /**
     * Get a ministry department
     * @description Retrieve a ministry department's details given its id.
     */
    get: operations["get-ministry-department"];
    /**
     * Delete a ministry department
     * @description Delete a ministry department given its id.
     */
    delete: operations["delete-ministry-department"];
    /**
     * Update a ministry department
     * @description Update a ministry department's details given its id and the corresponding fields to update.
     */
    patch: operations["update-ministry-department"];
  };
  "/ministry-roles": {
    /**
     * List or search ministry roles
     * @description Retrieve a list of ministry roles or search for ministry roles given a query.
     */
    get: operations["list-ministry-roles"];
    /**
     * Create a ministry role
     * @description Create a new ministry role given its information.
     */
    post: operations["create-ministry-role"];
  };
  "/ministry-roles/{id}": {
    /**
     * Get a ministry role
     * @description Retrieve a ministry role's details given its id.
     */
    get: operations["get-ministry-role"];
    /**
     * Delete a ministry role
     * @description Delete a ministry role given its id.
     */
    delete: operations["delete-ministry-role"];
    /**
     * Update a ministry role
     * @description Update a ministry role's details given its id and the corresponding fields to update.
     */
    patch: operations["update-ministry-role"];
  };
  "/ministry-teams": {
    /**
     * List or search ministry teams
     * @description Retrieve a list of ministry teams or search for ministry teams given a query.
     */
    get: operations["list-ministry-team"];
    /**
     * Create a ministry team
     * @description Create a new ministry team given its information.
     */
    post: operations["create-ministry-team"];
  };
  "/ministry-teams/{id}": {
    /**
     * Get a ministry team
     * @description Retrieve a ministry team's details given its id.
     */
    get: operations["get-ministry-team"];
    /**
     * Delete a ministry team
     * @description Delete a ministry team given its id.
     */
    delete: operations["delete-ministry-team"];
    /**
     * Update a ministry team
     * @description Update a ministry team's details given its id and the corresponding fields to update.
     */
    patch: operations["update-ministry-team"];
  };
  "/pastoral-roles": {
    /**
     * List or search pastoral roles
     * @description Retrieve a list of pastoral roles or search for pastoral roles given a query.
     */
    get: operations["list-pastoral-roles"];
    /**
     * Create a pastoral role
     * @description Create a new pastoral role given its information.
     */
    post: operations["create-pastoral-role"];
  };
  "/pastoral-roles/{id}": {
    /**
     * Get a pastoral role
     * @description Retrieve a pastoral role's details given its id.
     */
    get: operations["get-pastoral-role"];
    /**
     * Delete a pastoral role
     * @description Delete a pastoral role given its id.
     */
    delete: operations["delete-pastoral-role"];
    /**
     * Update a pastoral role
     * @description Update a pastoral role's details given its id and the corresponding fields to update.
     */
    patch: operations["update-pastoral-role"];
  };
  "/satellites": {
    /**
     * List or search satellites
     * @description Retrieve a list of satellites or search for satellites given a query.
     */
    get: operations["list-satellites"];
    /**
     * Create a satellite
     * @description Create a new satellite given its information.
     */
    post: operations["create-satellite"];
  };
  "/satellites/{id}": {
    /**
     * Get a satellite
     * @description Retrieve a satellite's details given its id.
     */
    get: operations["get-satellite"];
    /**
     * Delete a satellite
     * @description Delete a satellite given its id.
     */
    delete: operations["delete-satellite"];
    /**
     * Update a satellite
     * @description Update a satellite's details given its id and the corresponding fields to update.
     */
    patch: operations["update-satellite"];
  };
  "/users": {
    /**
     * List or search users
     * @description Retrieve a list of users or search for users given a query. For now it only supports
     * retrieving a list of users.
     */
    get: operations["list-users"];
    /**
     * Create a user
     * @description Create a new user given its information. This endpoint ideally should be called after a
     * user is created in Auth0 such as after signup or logging in through social providers.
     */
    post: operations["create-user"];
  };
  "/users/{id}": {
    /**
     * Get a user
     * @description Retrieve a user's details given its id.
     */
    get: operations["get-user"];
    /**
     * Delete a user
     * @description Deletes a user based on the id from the database.
     */
    delete: operations["delete-user"];
    /**
     * Update a user
     * @description Update a user's details given its id and the corresponding fields to update.
     */
    patch: operations["update-user"];
  };
  "/users/{id}/connect-groups": {
    /**
     * Get a user's connect groups
     * @description List the connect groups that a user is in.
     */
    get: operations["get-user-connect-groups"];
  };
  "/users/{id}/ministries": {
    /**
     * Get a user's ministries
     * @description List the ministries that a user is in.
     */
    get: operations["get-user-ministries"];
  };
  "/users/{id}/ministry-roles": {
    /**
     * Get a user's ministry roles
     * @description List the ministry roles associated with a user.
     */
    get: operations["get-user-ministry-roles"];
  };
  "/users/{id}/pastoral-roles": {
    /**
     * Get a user's pastoral roles
     * @description List the pastoral roles associated with a user.
     */
    get: operations["get-user-pastoral-roles"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Address: {
      city: string;
      country: string;
      line_one: string;
      line_two?: string;
      postal_code: string;
      state: string;
    };
    AssociateUsersWithConnectGroupRequest: {
      users: components["schemas"]["AssociateUsersWithConnectGroupRequestUser"][];
    };
    AssociateUsersWithConnectGroupRequestUser: {
      role_id: string;
      user_id: string;
    };
    AssociateUsersWithMinistryRequest: {
      users: components["schemas"]["AssociateUsersWithMinistryRequestUser"][];
    };
    AssociateUsersWithMinistryRequestUser: {
      role_id: string;
      user_id: string;
    };
    ConnectGroup: {
      /** Format: date-time */
      created_at: string;
      id: string;
      name?: string;
      /** Format: int32 */
      no: number;
      satellite_id: string;
      /** Format: date-time */
      updated_at: string;
      variant?: string;
    };
    CreateConnectGroupRequest: {
      name: string;
      /** Format: int32 */
      no: number;
      satellite_id: string;
      variant: string;
    };
    CreateMinistryDepartmentRequest: {
      description: string;
      name: string;
    };
    CreateMinistryRequest: {
      department_id: string;
      description: string;
      name: string;
      satellite_id: string;
      team_id: string;
    };
    CreateMinistryRoleRequest: {
      description: string;
      name: string;
      /** Format: int32 */
      weight: number;
    };
    CreateMinistryTeamRequest: {
      description: string;
      name: string;
    };
    CreatePastoralRoleRequest: {
      description: string;
      name: string;
      /** Format: int32 */
      weight: number;
    };
    CreateSatelliteRequest: {
      address?: components["schemas"]["Address"];
      name: string;
      /** Format: int32 */
      no: number;
    };
    CreateUserRequest: {
      address?: components["schemas"]["Address"];
      avatar_url?: string;
      /** Format: date-time */
      date_of_birth?: string;
      email: string;
      email_verified?: boolean;
      family_name?: string;
      gender?: components["schemas"]["Gender"];
      given_name?: string;
      ic_number?: string;
      id: string;
      name: string;
      nickname?: string;
      /** Format: int32 */
      no?: number;
      phone_number?: string;
      phone_number_verified?: boolean;
      username?: string;
    };
    ErrorResponse: {
      message: string;
    };
    /** @enum {string} */
    Gender: "male" | "female";
    GetUserConnectGroupsRepsonse: {
      cg: components["schemas"]["ConnectGroup"];
      role: components["schemas"]["PastoralRole"];
    };
    GetUserMinistriesRepsonse: {
      ministry: components["schemas"]["Ministry"];
      role: components["schemas"]["MinistryRole"];
    };
    Ministry: {
      /** Format: date-time */
      created_at: string;
      department_id: string;
      description: string;
      id: string;
      name: string;
      satellite_id: string;
      team_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    MinistryDepartment: {
      /** Format: date-time */
      created_at: string;
      description: string;
      id: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
    };
    MinistryRole: {
      description: string;
      id: string;
      name: string;
      /** Format: int32 */
      weight: number;
    };
    MinistryTeam: {
      /** Format: date-time */
      created_at: string;
      description: string;
      id: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
    };
    PastoralRole: {
      description: string;
      id: string;
      name: string;
      /** Format: int32 */
      weight: number;
    };
    RemoveUsersFromConnectGroupRequest: {
      users: string[];
    };
    RemoveUsersFromMinistryRequest: {
      users: string[];
    };
    Satellite: {
      address: components["schemas"]["Address"];
      /** Format: date-time */
      created_at: string;
      id: string;
      name: string;
      /** Format: int32 */
      no: number;
      /** Format: date-time */
      updated_at: string;
    };
    UpdateConnectGroupRequest: {
      name?: string;
      /** Format: int32 */
      no?: number;
      satellite_id?: string;
      variant?: string;
    };
    UpdateMinistryDepartmentRequest: {
      description?: string;
      name?: string;
    };
    UpdateMinistryRequest: {
      department_id?: string;
      description?: string;
      name?: string;
      satellite_id?: string;
      team_id?: string;
    };
    UpdateMinistryRoleRequest: {
      description?: string;
      name?: string;
      /** Format: int32 */
      weight?: number;
    };
    UpdateMinistryTeamRequest: {
      description?: string;
      name?: string;
    };
    UpdatePastoralRoleRequest: {
      description?: string;
      name?: string;
      /** Format: int32 */
      weight?: number;
    };
    UpdateSatelliteRequest: {
      address?: components["schemas"]["Address"];
      name?: string;
      /** Format: int32 */
      no?: number;
    };
    UpdateUserRequest: {
      address?: components["schemas"]["Address"];
      avatar_url?: string;
      /** Format: date-time */
      date_of_birth?: string;
      email?: string;
      email_verified?: boolean;
      family_name?: string;
      gender?: components["schemas"]["Gender"];
      given_name?: string;
      ic_number?: string;
      id: string;
      name?: string;
      nickname?: string;
      /** Format: int32 */
      no?: number;
      phone_number?: string;
      phone_number_verified?: boolean;
      username?: string;
    };
    User: {
      address?: components["schemas"]["Address"];
      avatar_url?: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      date_of_birth?: string;
      email: string;
      email_verified: boolean;
      family_name?: string;
      gender?: components["schemas"]["Gender"];
      given_name?: string;
      ic_number?: string;
      id: string;
      name: string;
      nickname?: string;
      /** Format: int32 */
      no: number;
      phone_number?: string;
      phone_number_verified?: boolean;
      /** Format: date-time */
      updated_at: string;
      username?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List or search connect groups
   * @description Retrieve a list of connect groups or search for connect groups given a query.
   */
  "list-connect-groups": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ConnectGroup"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a connect group
   * @description Create a new connect group given its information.
   */
  "create-connect-group": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateConnectGroupRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ConnectGroup"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a connect group
   * @description Retrieve a connect group's details given its id.
   */
  "get-connect-group": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ConnectGroup"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a connect group
   * @description Delete a connect group given its id.
   */
  "delete-connect-group": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ConnectGroup"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a connect group
   * @description Update a connect group's details given its id and the corresponding fields to update.
   */
  "update-connect-group": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateConnectGroupRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ConnectGroup"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get connect group users
   * @description Retrieve a list of users associated with a connect group given the connect group's id.
   */
  "get-connect-group-users": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Associate users with a connect group
   * @description Associate users with a connect group given the connect group's id and the users' ids.
   */
  "associate-users-with-connect-group": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["AssociateUsersWithConnectGroupRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": string;
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Remove users from a connect group
   * @description Remove users from a connect group given the connect group's id and the users' ids.
   */
  "remove-users-from-connect-group": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["RemoveUsersFromConnectGroupRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": string;
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search ministries
   * @description Retrieve a list of ministries or search for ministries given a query.
   */
  "list-ministries": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Ministry"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a ministry
   * @description Create a new ministry given its information.
   */
  "create-ministry": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateMinistryRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Ministry"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a ministry
   * @description Retrieve a ministry's details given its id.
   */
  "get-ministry": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Ministry"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a ministry
   * @description Delete a ministry given its id.
   */
  "delete-ministry": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Ministry"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a ministry
   * @description Update a ministry's details given its id and the corresponding fields to update.
   */
  "update-ministry": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateMinistryRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Ministry"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get users associated with a ministry
   * @description Retrieve a list of users associated with a ministry given the ministry's id.
   */
  "get-ministry-users": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Associate users with a ministry
   * @description Associate users with a ministry given the ministry's id and the users' ids.
   */
  "associate-users-with-ministry": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["AssociateUsersWithMinistryRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": string;
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Remove users from a ministry
   * @description Remove users from a ministry given the ministry's id and the users' ids.
   */
  "remove-users-from-ministry": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["RemoveUsersFromMinistryRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": string;
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search ministry departments
   * @description Retrieve a list of ministry departments or search for ministry departments given a query.
   */
  "list-ministry-department": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryDepartment"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a ministry department
   * @description Create a new ministry department given its information.
   */
  "create-ministry-department": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateMinistryDepartmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryDepartment"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a ministry department
   * @description Retrieve a ministry department's details given its id.
   */
  "get-ministry-department": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryDepartment"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a ministry department
   * @description Delete a ministry department given its id.
   */
  "delete-ministry-department": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryDepartment"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a ministry department
   * @description Update a ministry department's details given its id and the corresponding fields to update.
   */
  "update-ministry-department": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateMinistryDepartmentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryDepartment"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search ministry roles
   * @description Retrieve a list of ministry roles or search for ministry roles given a query.
   */
  "list-ministry-roles": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryRole"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a ministry role
   * @description Create a new ministry role given its information.
   */
  "create-ministry-role": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateMinistryRoleRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a ministry role
   * @description Retrieve a ministry role's details given its id.
   */
  "get-ministry-role": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a ministry role
   * @description Delete a ministry role given its id.
   */
  "delete-ministry-role": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a ministry role
   * @description Update a ministry role's details given its id and the corresponding fields to update.
   */
  "update-ministry-role": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateMinistryRoleRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search ministry teams
   * @description Retrieve a list of ministry teams or search for ministry teams given a query.
   */
  "list-ministry-team": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryTeam"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a ministry team
   * @description Create a new ministry team given its information.
   */
  "create-ministry-team": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateMinistryTeamRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryTeam"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a ministry team
   * @description Retrieve a ministry team's details given its id.
   */
  "get-ministry-team": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryTeam"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a ministry team
   * @description Delete a ministry team given its id.
   */
  "delete-ministry-team": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryTeam"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a ministry team
   * @description Update a ministry team's details given its id and the corresponding fields to update.
   */
  "update-ministry-team": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateMinistryTeamRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryTeam"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search pastoral roles
   * @description Retrieve a list of pastoral roles or search for pastoral roles given a query.
   */
  "list-pastoral-roles": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PastoralRole"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a pastoral role
   * @description Create a new pastoral role given its information.
   */
  "create-pastoral-role": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreatePastoralRoleRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PastoralRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a pastoral role
   * @description Retrieve a pastoral role's details given its id.
   */
  "get-pastoral-role": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PastoralRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a pastoral role
   * @description Delete a pastoral role given its id.
   */
  "delete-pastoral-role": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PastoralRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a pastoral role
   * @description Update a pastoral role's details given its id and the corresponding fields to update.
   */
  "update-pastoral-role": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdatePastoralRoleRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PastoralRole"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search satellites
   * @description Retrieve a list of satellites or search for satellites given a query.
   */
  "list-satellites": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Satellite"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a satellite
   * @description Create a new satellite given its information.
   */
  "create-satellite": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateSatelliteRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Satellite"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a satellite
   * @description Retrieve a satellite's details given its id.
   */
  "get-satellite": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Satellite"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a satellite
   * @description Delete a satellite given its id.
   */
  "delete-satellite": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Satellite"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a satellite
   * @description Update a satellite's details given its id and the corresponding fields to update.
   */
  "update-satellite": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateSatelliteRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Satellite"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * List or search users
   * @description Retrieve a list of users or search for users given a query. For now it only supports
   * retrieving a list of users.
   */
  "list-users": {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a user
   * @description Create a new user given its information. This endpoint ideally should be called after a
   * user is created in Auth0 such as after signup or logging in through social providers.
   */
  "create-user": {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CreateUserRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a user
   * @description Retrieve a user's details given its id.
   */
  "get-user": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete a user
   * @description Deletes a user based on the id from the database.
   */
  "delete-user": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Update a user
   * @description Update a user's details given its id and the corresponding fields to update.
   */
  "update-user": {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["UpdateUserRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a user's connect groups
   * @description List the connect groups that a user is in.
   */
  "get-user-connect-groups": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["GetUserConnectGroupsRepsonse"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a user's ministries
   * @description List the ministries that a user is in.
   */
  "get-user-ministries": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["GetUserMinistriesRepsonse"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a user's ministry roles
   * @description List the ministry roles associated with a user.
   */
  "get-user-ministry-roles": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["MinistryRole"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get a user's pastoral roles
   * @description List the pastoral roles associated with a user.
   */
  "get-user-pastoral-roles": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["PastoralRole"][];
        };
      };
      400: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
